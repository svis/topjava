 Понять, почему перестали работать SpringMain, InMemoryAdminRestControllerTest, InMemoryAdminRestControllerSpringTest. Чиним в Optional.
2 Дополнить скрипты создания и инициализации базы таблицой MEALS. Запустить скрипты на вашу базу (через Run). Порядок таблиц при DROP и DELETE важен, если они связаны внешними ключами (foreign key, fk). Проверьте, что ваши скрипты работают
3 Реализовать через Spring JDBC Template JdbcMealRepository
3.1. сделать каждый метод за один SQL запрос
3.2. userId в класс Meal вставлять НЕ надо, делаем foreign key только в базе (для UI и REST это лишние данные, userId это id залогиненного пользователя)
3.3. JbdcTemplate работает через сеттеры. Вместе с конструктором по умолчанию их нужно добавить в Meal
3.4. Список еды должен быть отсортирован (тогда мы его сможем сравнивать с тестовыми данными). Кроме того это требуется для UI и API: последняя еда наверху.
4 Проверить работу MealServlet, запустив приложение
Optional
5 Сделать MealServiceTest из MealService и реализовать тесты для JdbcMealRepository.
По Ctrl+Shift+T (выбрать JUnit4) можно создать тест для конкретного класса, выбрав для него нужные методы. Тестовый класс создастся в папке test в том же пакете, что и тестируемый.

5.1 Сделать тестовые данные MealTestData (точно такие же, как вставляем в populateDB.sql).
5.2 Сделать тесты на чужую еду (delete, get, update) с тем чтобы получить NotFoundException.
6 Починить SpringMain, InMemory*Test. InMemory тесты должны использовать реализацию в памяти
7 Сделать индексы к таблице Meals: запретить создавать у одного и того-же юзера еду с одинаковой dateTime